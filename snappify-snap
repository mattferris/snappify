#!/bin/bash
#
# snappify snapshot management suite
# github.com/mattferris/snappify
#
# Copyright (c) 2018 Matt Ferris
# Released under the BSD 2-clause license
# github.com/mattferris/snappify/blob/master/LICENSE.txt

# the location of the snap repo
root=".snappify"

# update the location of the snap repo if it was included in the environment
if [ ! -z "$SNAPPIFY_ROOT" ]; then
    root=$SNAPPIFY_ROOT
else
    export SNAPPIFY_ROOT=$root
fi

# report an error
function err {
    echo "error: $2" >&2
    exit $1
}

# report a notice
function notice {
    echo "notice: $1" >&2
}

# generate a checksum for a string
function strsum {
    echo -n "$1" | sha1sum | cut -d\  -f1
}

# search current and parent directories for repo
function findrepo {
    path=$1
    if [ -d "$path/.snappify" ]; then
        echo "$path/.snappify"
        return 0
    elif [ "$path" = "/" ]; then
        err 2 "no repository found"
    else
        findrepo "$(dirname $path)"
    fi
}

# collect arguments
message=$1

# determine the location of the repo
if [ ! -d "$root" ]; then
    root=$(findrepo $(pwd))
fi

# write the files to the repo
hash=$(snappify-write "$(dirname "$root")")

# verify write was successful
if [ ! $? = 0 ]; then
    err 2 "snapshot failed, an error was encountered while writing to $root"
fi

# make sure snaps directory exists
if [ ! -d "$root/snaps" ]; then
    mkdir "$root/snaps" || err 2 "failed to create snap directory"
fi

# check if this fileset is the same as the last snapshot
last=$(snappify-alias last 2>/dev/null)
if [ $? = 0 -a ! -z "$last" ]; then
    lasthash=$(snappify-read "$last" | head -n1 | cut -d\  -f3)
    if [ "$hash" = "$lasthash" ]; then
        err 2 "no changes since last snapshot, aborting"
    fi
fi

data="$(whoami) $(date +'%s') $hash"
snapsum=$(strsum "$data")

# write snapshot metadata
snapsum=$(cat <<EOF | snappify-write
$data
$message
EOF
)

# verify snap was written
if [ ! $? = 0 ]; then
    err 2 "snapshot failed, failed to write snapshot metadata"
fi

# add snapshot to log
echo "$snapsum" >> "$root/log"

# point 'last' alias to new snapshot
snappify-alias last "$snapsum" || err 2 "failed to updated 'last' alias to point to new snap"

echo "created snapshot $snapsum"
